import { Command, IExecuteInput, MessageKind } from '@5qtrs/cli';
import { ExecuteService, ProfileService, UserService } from '../services';
import { fromBase64 } from '@5qtrs/base64';
import { Text } from '@5qtrs/text';

export class InitCommand extends Command {
  public static async create() {
    return new InitCommand();
  }

  private constructor() {
    super({
      name: 'CLI Initialize',
      cmd: 'init',
      summary: 'Initialize the CLI',
      description: 'Initializes use of the CLI using an init token generated by an account admin.',
      arguments: [
        {
          name: 'token',
          description: 'The init token generated by an account admin',
        },
      ],
      options: [
        {
          name: 'profile',
          aliases: ['p'],
          description: 'The name of the profile to create with the initalization of the CLI',
        },
      ],
    });
  }

  protected async onExecute(input: IExecuteInput): Promise<number> {
    await input.io.writeLine();

    const token = input.arguments[0] as string;

    const decoded = fromBase64(token);
    const [baseUrl, accountId, agentId, initId] = decoded.split('::');

    let profile = input.options.profile as string;

    const executeService = await ExecuteService.create(input);
    const profileService = await ProfileService.create(input);
    const userService = await UserService.create(input);

    if (!profile) {
      let defaultProfile = await profileService.getDefaultProfile();
      if (defaultProfile) {
        profile = defaultProfile;
      } else {
        if (baseUrl.indexOf('http') !== -1) {
          profile = 'local';
        } else {
          profile = baseUrl.split('.')[0];
        }
        await profileService.setDefaultProfile(profile);
      }
    }

    const existing = await profileService.getProfile(profile, false);
    if (existing) {
      const confirmed = await profileService.confirmInitProfile(profile, existing);
      if (!confirmed) {
        return 1;
      }
      await profileService.removeProfile(profile);
    }

    const newProfile = await profileService.addProfile(profile, accountId, baseUrl);
    if (!newProfile || !newProfile.issuer || !newProfile.subject) {
      executeService.result({
        header: 'Profile Error',
        message: 'There was an error generating the new profile',
        kind: MessageKind.error,
      });
      return 1;
    }

    const publicKey = await profileService.getPublicKey(newProfile.name);
    if (!publicKey) {
      executeService.result({
        header: 'Key Pair Error',
        message: 'There was an error generating the public private key pair',
        kind: MessageKind.error,
      });
      return 1;
    }

    const initResolve = {
      displayName: `cli - ${agentId}`,
      publicKey,
      keyId: newProfile.kid,
      iss: newProfile.issuer,
      sub: newProfile.subject,
    };

    const user = await userService.resolveInitId(accountId, agentId, initId, initResolve);
    if (!user) {
      return 1;
    }

    executeService.result({
      header: 'Initialized',
      message: Text.create("The CLI has been successfully initalized with profile '", Text.bold(profile), "'"),
    });

    await userService.displayUser(user);

    return 0;
  }
}
