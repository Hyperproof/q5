import { Command, IExecuteInput } from '@5qtrs/cli';
import { ExecuteService, ProfileService, UserService, ClientService } from '../services';
import { Text } from '@5qtrs/text';

// ------------------
// Internal Constants
// ------------------

const command = {
  name: 'CLI Initialize',
  cmd: 'init',
  summary: 'Initialize the CLI',
  description: 'Initializes use of the CLI using an init token generated by an account admin.',
  arguments: [
    {
      name: 'token',
      description: 'The init token generated by an account admin',
    },
  ],
  options: [
    {
      name: 'profile',
      aliases: ['p'],
      description: 'The name of the profile to create with the initalization of the CLI',
    },
  ],
};

// ----------------
// Exported Classes
// ----------------

export class InitCommand extends Command {
  private constructor() {
    super(command);
  }

  public static async create() {
    return new InitCommand();
  }

  protected async onExecute(input: IExecuteInput): Promise<number> {
    await input.io.writeLine();

    const token = input.arguments[0] as string;
    let profileName = input.options.profile as string;

    const executeService = await ExecuteService.create(input);
    const profileService = await ProfileService.create(input);
    const userService = await UserService.create(input);
    const clientService = await ClientService.create(input);

    const decodedToken = await userService.decodeInitToken(token);
    const { accountId, subscriptionId, boundaryId, functionId, agentId, baseUrl, iss, sub } = decodedToken;

    if (!profileName) {
      profileName = await profileService.getProfileNameFromBaseUrl(baseUrl);
    }

    const existing = await profileService.getProfile(profileName);
    if (existing) {
      await profileService.confirmInitProfile(profileName, existing);
      await profileService.removeProfile(profileName);
    }

    const newProfile = {
      baseUrl,
      account: accountId,
      subscription: subscriptionId,
      boundary: boundaryId,
      function: functionId,
      agent: agentId,
      issuer: iss,
      subject: sub,
    };

    const profile = await profileService.addProfile(profileName, newProfile);

    const defaultProfileName = await profileService.getDefaultProfileName();
    if (!defaultProfileName) {
      await profileService.setDefaultProfileName(profileName);
    }

    const publicKey = await profileService.getPublicKey(profileName);

    const initResolve = {
      publicKey,
      keyId: profile.kid,
      jwt: token,
    };

    if (agentId.indexOf('usr') === 0) {
      const user = await userService.resolveInit(accountId, agentId, initResolve);

      executeService.result(
        'Initialized',
        Text.create("The CLI has been successfully initalized with profile '", Text.bold(profileName), "'")
      );

      await userService.displayUser(user);
    } else {
      const client = await clientService.resolveInit(accountId, agentId, initResolve);

      executeService.result(
        'Initialized',
        Text.create("The CLI has been successfully initalized with profile '", Text.bold(profileName), "'")
      );

      await clientService.displayClient(client);
    }

    return 0;
  }
}
