openapi: 3.0.0

info:
  description: 'Flexd HTTP API for the management and execution of Flexd accounts, users, functions and more'
  version: '1.0.0'
  title: 'Flexd HTTP API'
  contact:
    email: contact@flexd.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

tags:
  - name: Accounts
    description: Account management operations
  - name: Users
    description: User management operations
  - name: Boundaries
    description: Boundary management operations
  - name: Functions
    description: Function management operations

paths:
  /account/{accountId}:
    parameters:
      - in: path
        name: accountId
        required: true
        description: Account id
        schema:
          $ref: '#/components/schemas/AccountId'
    get:
      tags:
        - Accounts
      summary: Get an account
      operationId: getAccount
      description: |
        Returns details about the given account.

        The caller must have 'manage' access to the given account in order to retrieve the details of the given account.
      responses:
        200:
          description: The account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        403:
          description: Not authorized
        404:
          description: Account not found
      security:
        - accessToken: []

  /account/{accountId}/audit:
    parameters:
      - in: path
        name: accountId
        required: true
        description: Account id
        schema:
          $ref: '#/components/schemas/AccountId'
      - in: query
        name: next
        required: false
        description: Optional opaque continuation token to start returning results from
        schema:
          type: string
      - in: query
        name: resource
        required: false
        description: Optional prefix of the resource to match against audit entries
        schema:
          type: string
      - in: query
        name: action
        required: false
        description: Optional action to match against audit entries
        schema:
          type: string
      - in: query
        name: issuer
        required: false
        description: Optional issuer identifier to match against audit entries
        schema:
          type: string
      - in: query
        name: from
        required: false
        description: Optional time from which to return audit entries; can be any format accepted by Date, or a relative time frame like '-15m', '-24h' etc.
        schema:
          type: string
      - in: query
        name: to
        required: false
        description: Optional time up to which to return audit entries; can be any format accepted by Date, or a relative time frame like '-15m', '-24h' etc.
        schema:
          type: string
      - in: query
        name: resource
        required: false
        description: Optional prefix of the resource to match against audit entries
        schema:
          type: string
      - in: query
        name: count
        required: false
        description: Optional maximum number of results to return;
        schema:
          type: number
          minimum: 1
    get:
      tags:
        - Accounts
      summary: Get audit trail
      operationId: getAccountAudit
      description: |
        Returns the audit trail of calls to Flexd HTTP APIs related to resources that belong to the accountId. 
        Each entry of the audit trail contains the timestamp of the call, resource, action, and the identity of 
        the caller represented as the (issuer, subject) pair. Use query string parameters to filter the entries. 
        This HTTP API supports paging. If the response contains the 'next' property, it indicates more results matching
        the criteria may be available. Make another call to the HTTP API and provide the value of 'next' response parameter
        in the 'next' query param. 

        By default, only the most recent 15 minutes of audit logs are returned. You can change this with the 'from' query parameter.

        The caller must have 'manage' access to the given account in order to retrieve the audit trail of the given account.
      responses:
        200:
          description: Entries of the audit trail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountAudit'
        403:
          description: Not authorized
        404:
          description: Account not found
      security:
        - accessToken: []

  /account/{accountId}/issuer:
    parameters:
      - in: path
        name: accountId
        required: true
        description: Account id
        schema:
          $ref: '#/components/schemas/AccountId'
    get:
      tags:
        - Accounts
      summary: Get issuers of an account
      operationId: getAccountIssuerList
      description: |
        Returns a list of issuers associated with the given account.

        The caller must have 'manage' access to the given account in order to retrieve the list of issuers of the given account.
      parameters:
        - in: query
          name: next
          required: false
          description: Optional issuer id to start returning results from
          schema:
            $ref: '#/components/schemas/IssuerId'
        - in: query
          name: count
          required: false
          description: Optional number of results to return; max is 100
          schema:
            type: number
            minimum: 1
            maximum: 100
      responses:
        200:
          description: A list of issuers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssuerList'
        403:
          description: Not authorized
      security:
        - accessToken: []

  /account/{accountId}/issuer/{issuerId}:
    parameters:
      - in: path
        name: accountId
        required: true
        description: Account id
        schema:
          $ref: '#/components/schemas/AccountId'
      - in: path
        name: issuerId
        required: true
        description: Issuer id
        schema:
          $ref: '#/components/schemas/IssuerId'
    get:
      tags:
        - Accounts
      summary: Get an issuer of an account
      operationId: getAccountIssuer
      description: |
        Returns an issuer associated with the given account.

        The caller must have 'manage' access to the given account in order to retrieve the given issuer of the given account.
      responses:
        200:
          description: The issuer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issuer'
        403:
          description: Not authorized
        404:
          description: Account or issuer not found
      security:
        - accessToken: []
    put:
      tags:
        - Accounts
      summary: Add or update an issuer of an account
      operationId: putAccountIssuer
      description: |
        Adds or updates an issuer associated with the given account.

        The caller must have 'manage' access to the given account in order to add or update the given issuer of the given account.
      requestBody:
        description: The issuer to add or update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewIssuer'
      responses:
        200:
          description: The issuer that was added or updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issuer'
        400:
          description: Invalid issuer
        403:
          description: Not authorized
        404:
          description: Account or issuer not found
      security:
        - accessToken: []
    delete:
      tags:
        - Accounts
      summary: Delete an issuer of an account
      description: |
        Deletes an issuer that was previously associated with the given account.

        The caller must have 'manage' access to the given account in order to delete the given issuer of the given account.
      operationId: deleteIssuer
      responses:
        204:
          description: Issuer was deleted
        403:
          description: Not authorized
        404:
          description: Account or issuer not found
      security:
        - accessToken: []

  /account/{accountId}/client:
    parameters:
      - in: path
        name: accountId
        required: true
        description: Account id
        schema:
          $ref: '#/components/schemas/AccountId'
    get:
      tags:
        - Accounts
      summary: Get clients of an account
      operationId: getAccountClientList
      description: |
        Returns a list of clients associated with the given account.

        The caller must have 'manage' access to the given account in order to retrieve the list of clients of the given account.
      parameters:
        - in: query
          name: next
          required: false
          description: Optional client id to start returning results from
          schema:
            $ref: '#/components/schemas/ClientId'
        - in: query
          name: count
          required: false
          description: Optional number of results to return; max is 100
          schema:
            type: number
            minimum: 1
            maximum: 100
      responses:
        200:
          description: A list of clients
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientList'
        403:
          description: Not authorized
      security:
        - accessToken: []
    post:
      tags:
        - Accounts
      summary: Add a client
      operationId: postClient
      description: |
        Adds a client to given account. 

        The caller must have 'manage' access to the given account in order to retrieve the list of clients of the given account.
      requestBody:
        description: The new client to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewClient'
      responses:
        200:
          description: The client that was added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        400:
          description: Invalid client
        403:
          description: Not authorized
      security:
        - accessToken: []

  /account/{accountId}/client/{clientId}:
    parameters:
      - in: path
        name: accountId
        required: true
        description: Account id
        schema:
          $ref: '#/components/schemas/AccountId'
      - in: path
        name: clientId
        required: true
        description: Client id
        schema:
          $ref: '#/components/schemas/ClientId'
    get:
      tags:
        - Accounts
      summary: Get a client of an account
      operationId: getAccountClient
      description: |
        Returns a client associated with the given account.

        The caller must have 'manage' access to the given account in order to retrieve the given client of the given account.
      responses:
        200:
          description: The client
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        403:
          description: Not authorized
        404:
          description: Account or client not found
      security:
        - accessToken: []
    put:
      tags:
        - Accounts
      summary: Update a client of an account
      operationId: putAccountClient
      description: |
        Updates a client associated with the given account.

        The caller must have 'manage' access to the given account in order to update the given client of the given account.
      requestBody:
        description: The client to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewClient'
      responses:
        200:
          description: The client that was updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        400:
          description: Invalid client
        403:
          description: Not authorized
        404:
          description: Account or client not found
      security:
        - accessToken: []
    delete:
      tags:
        - Accounts
      summary: Delete a client of an account
      description: |
        Deletes a client that was previously associated with the given account.

        The caller must have 'manage' access to the given account in order to delete the given client of the given account.
      operationId: deleteClient
      responses:
        204:
          description: Client was deleted
        403:
          description: Not authorized
        404:
          description: Account or client not found
      security:
        - accessToken: []

  /account/{accountId}/subscription:
    parameters:
      - in: path
        name: accountId
        required: true
        description: Account id
        schema:
          $ref: '#/components/schemas/AccountId'
    get:
      tags:
        - Accounts
      summary: Get subscriptions of an account
      operationId: getAccountSubscriptionList
      description: |
        Returns a list of the subscriptions of the given account.

        The list of subscriptions is filtered based on the access of the caller. If the caller has 'manage' access to the given account, the list will include all subscriptions of the given account. If the caller has 'manage' access to a subscription, the list will include that given subscription.
      parameters:
        - in: query
          name: next
          required: false
          description: Optional subscription id to start returning results from
          schema:
            $ref: '#/components/schemas/SubscriptionId'
        - in: query
          name: count
          required: false
          description: Optional number of results to return; max is 100
          schema:
            type: number
            minimum: 1
            maximum: 100
      responses:
        200:
          description: List of subscriptions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionList'
        403:
          description: Not authorized
        404:
          description: Account not found
      security:
        - accessToken: []

  /account/{accountId}/subscription/{subscriptionId}:
    parameters:
      - in: path
        name: accountId
        required: true
        description: Account id
        schema:
          $ref: '#/components/schemas/AccountId'
      - in: path
        name: subscriptionId
        required: true
        description: Subscription id
        schema:
          $ref: '#/components/schemas/SubscriptionId'
    get:
      tags:
        - Accounts
      summary: Get a subscription of an account
      operationId: getSubscription
      description: |
        Returns the details of the given subscription of the given account.

        The caller must have 'manage' access to the given account or 'manage' access to the given subscription in order to retrieve the subscription.
      responses:
        200:
          description: A Subscription
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        403:
          description: Not authorized
        404:
          description: Account or subscription not found
      security:
        - accessToken: []

  /account/{accountId}/user:
    parameters:
      - in: path
        name: accountId
        required: true
        description: Account id
        schema:
          $ref: '#/components/schemas/AccountId'
    get:
      tags:
        - Users
      summary: Get users
      operationId: getUserList
      description: |
        Returns a list of users.

        The list of users is filtered based on the access of the caller. If the caller has 'manage' access to an account, the list will include all users with access to the given account. If the caller has 'manage' access to a subscription, the list will include all users with access to the given subscription.

        In addition, the list of access statements of each user is filtered based on the access of the caller. If the caller has 'manage' access to an account, the list of access statements will include the access to the given account. If the caller has 'manage' access to a subscription,the list of access statements will include the access to the given subscription.
      parameters:
        - in: query
          name: subscriptionId
          required: false
          description: Optional subscription id to filter by
          schema:
            $ref: '#/components/schemas/SubscriptionId'
        - in: query
          name: next
          required: false
          description: Optional user id to start returning results from
          schema:
            $ref: '#/components/schemas/UserId'
        - in: query
          name: count
          required: false
          description: Optional number of results to return; max is 100
          schema:
            type: number
            minimum: 1
            maximum: 100
      responses:
        200:
          description: List of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
        403:
          description: Not authorized
      security:
        - accessToken: []
    post:
      tags:
        - Users
      summary: Add a user
      operationId: postUser
      description: |
        Adds a user to the platform. 

        A caller must have 'manage' access to an account in order to add a user to the platform that has access to that given account. A caller must have 'manage' access to a subscription in order to add a user to the platform that has access to that given subscription.
      requestBody:
        description: The new user to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        200:
          description: The user that was added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid user
        403:
          description: Not authorized
      security:
        - accessToken: []

  /account/{accountId}/user/{userId}:
    parameters:
      - in: path
        name: accountId
        required: true
        description: Account id
        schema:
          $ref: '#/components/schemas/AccountId'
      - in: path
        name: userId
        required: true
        description: User id
        schema:
          $ref: '#/components/schemas/UserId'
    get:
      tags:
        - Users
      summary: Get a user
      operationId: getUser
      description: |
        Returns details of a user.

        The list of access statements of each user is filtered based on the access of the caller. If the caller has 'manage' access to an account, the list of access statements will include the access to the given account. If the caller has 'manage' access to a subscription,the list of access statements will include the access to the given subscription.
      responses:
        200:
          description: The user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

        403:
          description: 'Not authorized'
      security:
        - accessToken: []
    put:
      tags:
        - Users
      summary: Update an existing user
      operationId: putUser
      description: |
        Updates the details of a user.

        A caller must have 'manage' access to an account in order to update a user to alter access to that given account. A caller must have 'manage' access to a subscription in order to update a user to alter access to that given subscription.
      requestBody:
        description: The user to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: The user that was updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid user
        403:
          description: Not authorized
        404:
          description: User not found
      security:
        - accessToken: []
    delete:
      tags:
        - Users
      summary: Delete a User
      parameters:
        - in: query
          name: accountId
          required: false
          description: Account id from which to remove the user's access
          schema:
            $ref: '#/components/schemas/AccountId'
      description: |
        Removes all identities and access from the given user to the given account if the account id is specified in the query string. If the account id is not specified, the identities and access for all of the accounts that the caller has 'manange' access of are removed from the given user.

        The caller must have 'manage' access to the given account in order to remove the given user's identities and access to that account.
      operationId: deleteUser
      responses:
        204:
          description: User was deleted
        403:
          description: Not authorized
        404:
          description: user not found
      security:
        - accessToken: []

  /account/{accountId}/subscription/{subscriptionId}/boundary:
    parameters:
      - in: path
        name: accountId
        required: true
        description: Account id
        schema:
          $ref: '#/components/schemas/AccountId'
      - name: subscriptionId
        in: path
        description: The subscription id
        required: true
        schema:
          $ref: '#/components/schemas/SubscriptionId'
    get:
      tags:
        - Boundaries
      summary: Get boundaries of a subscription
      description: |
        Returns the list of boundaries that have one or more functions in the subscription.

        A caller must have 'manage' access to the given account or the subscription in order to retrieve the list of boundaries of the subscription.
      operationId: getBoundaryList
      parameters:
        - in: query
          name: next
          required: false
          description: Optional boundary id to start returning results from
          schema:
            $ref: '#/components/schemas/BoundaryId'
        - in: query
          name: count
          required: false
          description: Optional number of results to return; max is 100
          schema:
            type: number
            minimum: 1
            maximum: 100
      responses:
        200:
          description: A list of boundaries
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoundaryList'
        403:
          description: Not authorized
        404:
          description: Subscription not found
      security:
        - accessToken: []

  /account/{accountId}/subscription/{subscriptionId}/function:
    parameters:
      - in: path
        name: accountId
        required: true
        description: Account id
        schema:
          $ref: '#/components/schemas/AccountId'
      - name: subscriptionId
        in: path
        description: The subscription id
        required: true
        schema:
          $ref: '#/components/schemas/SubscriptionId'
    get:
      tags:
        - Functions
      summary: Get the functions of a subscription
      description: |
        Returns the list of functions of a given subscription.

        A caller must have 'manage' access to the given account or subscription in order to retrieve the list of functions in the subscription.
      operationId: getSubscriptionFunctionList
      parameters:
        - in: query
          name: next
          required: false
          description: Optional function id to start returning results from
          schema:
            $ref: '#/components/schemas/FunctionId'
        - in: query
          name: count
          required: false
          description: Optional number of results to return; max is 100
          schema:
            type: number
            minimum: 1
            maximum: 100
        - in: query
          name: cron
          required: false
          description: If 'true' only functions with cron enabled will be returned. If 'false' only functions without cron enabled will be returned. If not specified, all functions will be returned.
          schema:
            type: boolean
      responses:
        200:
          description: A list of functions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FunctionList'
        403:
          description: Not authorized
        404:
          description: Subscription not found
      security:
        - accessToken: []

  /account/{accountId}/subscription/{subscriptionId}/boundary/{boundaryId}/function:
    parameters:
      - in: path
        name: accountId
        required: true
        description: Account id
        schema:
          $ref: '#/components/schemas/AccountId'
      - name: subscriptionId
        in: path
        description: The subscription id
        required: true
        schema:
          $ref: '#/components/schemas/SubscriptionId'
      - name: boundaryId
        in: path
        description: The boundary id
        required: true
        schema:
          $ref: '#/components/schemas/BoundaryId'
    get:
      tags:
        - Boundaries
      summary: Get the functions of a boundary
      description: |
        Returns the list of functions in a given boundary of a given subscription.

        A caller must have 'manage' access to the given account, subscription or boundary in order to retrieve the list of functions in the boundary.
      operationId: getFunctionList
      parameters:
        - in: query
          name: next
          required: false
          description: Optional function id to start returning results from
          schema:
            $ref: '#/components/schemas/FunctionId'
        - in: query
          name: count
          required: false
          description: Optional number of results to return; max is 100
          schema:
            type: number
            minimum: 1
            maximum: 100
        - in: query
          name: cron
          required: false
          description: If 'true' only functions with cron enabled will be returned. If 'false' only functions without cron enabled will be returned. If not specified, all functions will be returned.
          schema:
            type: boolean
      responses:
        200:
          description: A list of functions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FunctionList'
        403:
          description: Not authorized
        404:
          description: Subscription or boundary not found
      security:
        - accessToken: []

  /account/{accountId}/subscription/{subscriptionId}/boundary/{boundaryId}/log:
    parameters:
      - in: path
        name: accountId
        required: true
        description: Account id
        schema:
          $ref: '#/components/schemas/AccountId'
      - name: subscriptionId
        in: path
        description: The subscription id
        required: true
        schema:
          $ref: '#/components/schemas/SubscriptionId'
      - name: boundaryId
        in: path
        description: The boundary id
        required: true
        schema:
          $ref: '#/components/schemas/BoundaryId'
    get:
      tags:
        - Boundaries
      summary: Get real-time logs of all functions of a boundary
      description: |
        Returns a text/event-stream response with streaming real-time logs generated by all functions executing in a boundary

        A caller must have 'manage' access to the given account, subscription or boundary in order to retrieve real-time streaming logs of functions in the boundary.
      operationId: getBoundaryLogs
      responses:
        200:
          description: Stream of text/event-stream log data
        403:
          description: Not authorized
        404:
          description: Subscription or boundary not found
      security:
        - accessToken: []

  /account/{accountId}/subscription/{subscriptionId}/boundary/{boundaryId}/function/{functionId}:
    parameters:
      - in: path
        name: accountId
        required: true
        description: Account id
        schema:
          $ref: '#/components/schemas/AccountId'
      - name: subscriptionId
        in: path
        description: The subscription id
        required: true
        schema:
          $ref: '#/components/schemas/SubscriptionId'
      - name: boundaryId
        in: path
        description: The boundary id, unique within the subscription.
        required: true
        schema:
          $ref: '#/components/schemas/BoundaryId'
      - name: functionId
        in: path
        description: The function id, unique within the boundary.
        required: true
        schema:
          $ref: '#/components/schemas/FunctionId'
    get:
      tags:
        - Functions
      summary: Get the definition of a deployed function
      description: |
        Returns the specification of a previously deployed function
      operationId: getFunction
      responses:
        200:
          description: The function specification
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Function'
        403:
          description: Not authorized
        404:
          description: Subscription, boundary or function not found
      security:
        - accessToken: []
    put:
      tags:
        - Functions
      summary: Initiate a new build and deployment of a function
      description: |
        Initiates a build and deployment of the function within the isolation boundary. This is an asynchronous operation that returns immediately with a 'buildId' representing the function build process. This 'buildId' can be used to poll for completion by calling 'GET /build/{buildId}'.

        The URL for executing the function will be provided as the 'location' property of the response.
      operationId: putFunction
      requestBody:
        description: The function to build and deploy
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewFunction'
      responses:
        201:
          description: Function build status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Build'
        400:
          description: Invalid function
        403:
          description: Not authorized
        404:
          description: Subscription, boundary or function not found
      security:
        - accessToken: []
    delete:
      tags:
        - Functions
      summary: Delete a function
      description: |
        Deletes a previously deployed function.
      operationId: deleteFunction
      responses:
        204:
          description: Function was deleted
        403:
          description: Not authorized
        404:
          description: Subscription, boundary or function not found
      security:
        - accessToken: []

  /account/{accountId}/subscription/{subscriptionId}/boundary/{boundaryId}/function/{functionId}/log:
    parameters:
      - in: path
        name: accountId
        required: true
        description: Account id
        schema:
          $ref: '#/components/schemas/AccountId'
      - name: subscriptionId
        in: path
        description: The subscription id
        required: true
        schema:
          $ref: '#/components/schemas/SubscriptionId'
      - name: boundaryId
        in: path
        description: The boundary id, unique within the subscription.
        required: true
        schema:
          $ref: '#/components/schemas/BoundaryId'
      - name: functionId
        in: path
        description: The function id, unique within the boundary.
        required: true
        schema:
          $ref: '#/components/schemas/FunctionId'
    get:
      tags:
        - Functions
      summary: Get real-time logs of a function
      description: |
        Returns a text/event-stream response with streaming real-time logs generated by the function

        A caller must have 'manage' access to the given account, subscription, boundary or function in order to retrieve real-time streaming logs of the function.
      operationId: getFunctionLog
      responses:
        200:
          description: Stream of text/event-stream log data
        403:
          description: Not authorized
        404:
          description: Subscription, boundary of function not found
      security:
        - accessToken: []

  /account/{accountId}/subscription/{subscriptionId}/boundary/{boundaryId}/function/{functionId}/location:
    parameters:
      - in: path
        name: accountId
        required: true
        description: Account id
        schema:
          $ref: '#/components/schemas/AccountId'
      - name: subscriptionId
        in: path
        description: The subscription id
        required: true
        schema:
          $ref: '#/components/schemas/SubscriptionId'
      - name: boundaryId
        in: path
        description: The boundary id, unique within the subscription.
        required: true
        schema:
          $ref: '#/components/schemas/BoundaryId'
      - name: functionId
        in: path
        description: The function id, unique within the boundary.
        required: true
        schema:
          $ref: '#/components/schemas/FunctionId'
    get:
      tags:
        - Functions
      summary: Get the URL for executing the function
      description: |
        Returns the URL to use to execute the function.

        A caller must have 'manage' access to the given account, subscription, boundary or function in order to retrieve
        the URL for executing the function.
      operationId: getFunctionLocation
      responses:
        200:
          description: The URL to use to execute the function
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FunctionLocation'
        403:
          description: Not authorized
        404:
          description: Subscription, boundary of function not found
      security:
        - accessToken: []

  /account/{accountId}/subscription/{subscriptionId}/boundary/{boundaryId}/function/{functionId}/build/{buildId}:
    parameters:
      - in: path
        name: accountId
        required: true
        description: Account id
        schema:
          $ref: '#/components/schemas/AccountId'
      - name: subscriptionId
        in: path
        description: The subscription id
        required: true
        schema:
          $ref: '#/components/schemas/SubscriptionId'
      - name: boundaryId
        in: path
        description: The boundary id, unique within the subscription.
        required: true
        schema:
          $ref: '#/components/schemas/BoundaryId'
      - name: functionId
        in: path
        description: The function id, unique within the boundary.
        required: true
        schema:
          $ref: '#/components/schemas/FunctionId'
      - name: buildId
        in: path
        description: The build id, unique to the function.
        required: true
        schema:
          $ref: '#/components/schemas/BuildId'
    get:
      tags:
        - Functions
      summary: Get the status of a build of a function
      description: |
        Returns the status of the build of a function. This is used for polling the result of the asynchronous build process of a function. The 'status' parameter progressess from 'pending' to 'building' to either 'success' or 'failure', which are the final states of the build process.

        A caller must have 'manage' access to the given account, subscription, boundary or function in order to retrieve the build status of the given function.
      operationId: getFunctionBuild
      responses:
        200:
          description: Function build status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Build'
        403:
          description: Not authorized
        404:
          description: Subscription, boundary, function or build not found
      security:
        - accessToken: []

components:
  securitySchemes:
    accessToken:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    AccountId:
      type: string
      description: Account id
      example: 'acc-02387f60baea4887a24669ef70705173'
    Account:
      type: object
      required:
        - id
        - displayName
      properties:
        id:
          $ref: '#/components/schemas/AccountId'
        displayName:
          type: string
          description: Account display name
          example: ABC Company

    AccountAudit:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          description: A list audit trail entries
          items:
            $ref: '#/components/schemas/AccountAuditEntry'
        next:
          type: string
          description: Continuation token to get the next batch of results. Submit as the 'next' query parameter on subsequent call.
          example: d5k7

    AccountAuditEntry:
      type: object
      required:
        - timestamp
        - action
        - resource
        - accountId
        - issuer
        - subject
      properties:
        accountId:
          $ref: '#/components/schemas/AccountId'
        timestamp:
          type: string
          description: Timestamp of the audit entry in ISO format
          example: 2019-03-21T03:48:36.408Z
        action:
          type: string
          description: Name of the action peformed
          example: function:put
        resource:
          type: string
          description: Name of the resource on which the action was performed
          example: /subscription/12345/boundary/myboundary/function/myfunction17
        issuer:
          type: string
          description: Identifier of the issuer that authenticated the user
          example: https://sales-anchor.auth0.com/
        subject:
          type: string
          description: Identifier of the user, unique within the issuer
          example: google-oauth2|skjdhfsadhfalkajsdhf

    SubscriptionId:
      type: string
      description: Subscription id
      example: 'sub-387669ef70700237a24517f60baea488'
    Subscription:
      type: object
      required:
        - id
        - displayName
      properties:
        id:
          $ref: '#/components/schemas/SubscriptionId'
        displayName:
          type: string
          description: Subscription display name
          example: Production Subscription
    SubscriptionList:
      type: object
      required:
        - items
      properties:
        next:
          $ref: '#/components/schemas/SubscriptionId'
        items:
          type: array
          description: A list of subscriptions
          items:
            $ref: '#/components/schemas/Subscription'

    PublicKey:
      type: object
      description: A key id and the public key for a public/private key pair
      required:
        - keyId
        - publicKey
      properties:
        keyId:
          type: string
          description: The key id for the public key
        publicKey:
          type: string
          description: The public key of a public/private key pair
    IssuerId:
      type: string
      description: Issuer id
      example: 'https://auth-server.company-abc.com'
    NewIssuer:
      type: object
      description: An issuer of access tokens that should be accepted
      required:
        - displayName
      properties:
        displayName:
          type: string
          description: Issuer display name
          example: Company ABC Authorization Server
        publicKeys:
          type: array
          description: |
            The public keys of the key pairs used to sign access tokens from the issuer. Either the 'publicKeys' or the jsonKeyUri' must be provided.
          items:
            $ref: '#/components/schemas/PublicKey'
        jsonKeyUri:
          type: string
          description: |
            The uri key of json key file that contains the public key of the key pair used to sign access tokens from the issuer. Either the 'publicKey' or the jsonKeyUri' must be provided.
    Issuer:
      allOf:
        - type: object
          required:
            - id
            - displayName
          properties:
            id:
              $ref: '#/components/schemas/IssuerId'
        - $ref: '#/components/schemas/NewIssuer'
    IssuerList:
      type: object
      required:
        - items
      properties:
        next:
          $ref: '#/components/schemas/IssuerId'
        items:
          type: array
          description: A list of issuers
          items:
            $ref: '#/components/schemas/Issuer'

    Identity:
      type: object
      required:
        - iss
        - sub
      properties:
        iss:
          $ref: '#/components/schemas/IssuerId'
        sub:
          type: string
          description: The 'sub' claim value in access tokens
    AccessStatement:
      type: object
      required:
        - action
      properties:
        action:
          type: string
          enum:
            - manage
          description: The action to perform
        account:
          $ref: '#/components/schemas/AccountId'
        subscription:
          $ref: '#/components/schemas/SubscriptionId'
        boundary:
          $ref: '#/components/schemas/BoundaryId'
        function:
          $ref: '#/components/schemas/FunctionId'

    ClientId:
      type: string
      description: Client id
      example: 'clt-cc46f3ab0760a9f411b72096e65cd1cc'
    NewClient:
      type: object
      properties:
        displayName:
          type: string
          description: The client's display name
          example: production-service
        identities:
          type: array
          items:
            $ref: '#/components/schemas/Identity'
        access:
          type: object
          properties:
            allow:
              type: array
              items:
                $ref: '#/components/schemas/AccessStatement'
    Client:
      allOf:
        - type: object
          required:
            - id
          properties:
            id:
              $ref: '#/components/schemas/ClientId'
        - $ref: '#/components/schemas/NewClient'
    ClientList:
      type: object
      required:
        - items
      properties:
        next:
          $ref: '#/components/schemas/ClientId'
        items:
          type: array
          description: A list of clients
          items:
            $ref: '#/components/schemas/Client'

    UserId:
      type: string
      description: User id
      example: 'usr-9f411b7209cc46f3ab0760a6e65cd1cc'
    NewUser:
      type: object
      properties:
        firstName:
          type: string
          description: The user's first name
          example: John
        lastName:
          type: string
          description: The user's last name
          example: Doe
        primaryEmail:
          type: string
          description: The user's primary email
        identities:
          type: array
          items:
            $ref: '#/components/schemas/Identity'
        access:
          type: object
          properties:
            allow:
              type: array
              items:
                $ref: '#/components/schemas/AccessStatement'
    User:
      allOf:
        - type: object
          required:
            - id
          properties:
            id:
              $ref: '#/components/schemas/UserId'
        - $ref: '#/components/schemas/NewUser'
    UserList:
      type: object
      required:
        - items
      properties:
        next:
          $ref: '#/components/schemas/UserId'
        items:
          type: array
          description: A list of users
          items:
            $ref: '#/components/schemas/User'

    BoundaryId:
      type: string
      description: Boundary id
      example: 'tenant-xyz'
    BoundaryList:
      type: object
      required:
        - items
      properties:
        next:
          $ref: '#/components/schemas/BoundaryId'
        items:
          type: array
          description: A list of boundaries
          items:
            $ref: '#/components/schemas/BoundaryId'

    FunctionId:
      type: string
      description: Function id
      example: 'task-123'
    FunctionLocation:
      type: object
      required:
        - location
      properties:
        location:
          type: string
          description: The URL for executing the function
          example: 'https://domain.com/task-abc'
    FunctionShort:
      type: object
      required:
        - functionId
        - boundaryId
      properties:
        functionId:
          $ref: '#/components/schemas/FunctionId'
        boundaryId:
          $ref: '#/components/schemas/BoundaryId'
        cron:
          type: string
          example: '*/15 * * * *'
    Function:
      allOf:
        - type: object
          required:
            - id
            - boundaryId
            - subscriptionId
          properties:
            id:
              $ref: '#/components/schemas/FunctionId'
            boundaryId:
              $ref: '#/components/schemas/BoundaryId'
            subscriptionId:
              $ref: '#/components/schemas/SubscriptionId'
        - $ref: '#/components/schemas/NewFunction'
        - $ref: '#/components/schemas/FunctionLocation'
    NewFunction:
      type: object
      properties:
        environment:
          type: string
          description: Programming environment
          enum:
            - nodejs
        provider:
          type: string
          description: Compute provider
          enum:
            - lambda
        configuration:
          type: object
        nodejs:
          type: object
          properties:
            files:
              type: object
              properties:
                index.js:
                  type: string
                  example: |
                    module.exports = (ctx, cb) => cb(null, {  body: 'Hello' });
                package.json:
                  type: object
                  properties:
                    engines:
                      type: object
                      properties:
                        node:
                          type: string
                          example: '> 8'
                    dependencies:
                      type: object
        schedule:
          type: object
          properties:
            cron:
              type: string
              example: '*/15 * * * *'
            timezone:
              type: string
              example: US/Pacific
        metadata:
          type: object
    FunctionList:
      type: object
      required:
        - items
      properties:
        next:
          $ref: '#/components/schemas/FunctionId'
        items:
          type: array
          description: A list of functions
          items:
            $ref: '#/components/schemas/FunctionShort'

    BuildId:
      type: string
      description: Build id
      example: 'bld-9f411b7209cc46f3ab0760a6e65cd1cc'
    Build:
      allOf:
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/BuildId'
            functionId:
              $ref: '#/components/schemas/FunctionId'
            boundaryId:
              $ref: '#/components/schemas/BoundaryId'
            subscriptionId:
              $ref: '#/components/schemas/SubscriptionId'
            status:
              type: 'string'
              enum:
                - 'pending'
                - 'building'
                - 'success'
                - 'failure'
            error:
              type: 'object'
            transitions:
              type: 'object'
        - $ref: '#/components/schemas/FunctionLocation'
